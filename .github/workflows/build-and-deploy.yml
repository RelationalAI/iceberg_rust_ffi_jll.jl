name: Build and Deploy Tarballs

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Name for the new branch to create (must not exist)'
        required: true
        type: string
      base_version:
        description: 'Base version to use (e.g., "0.1.0")'
        required: true
        type: string
      targets:
        description: 'Target platforms to build for (comma-separated)'
        required: false
        default: 'x86_64-linux-gnu'
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate branch name
      run: |
        branch_name="${{ github.event.inputs.branch_name }}"
        if [ "$branch_name" = "main" ]; then
          echo "Error: Cannot create a branch named 'main'."
          exit 1
        fi
        
        # Check if branch already exists
        if git ls-remote --heads origin "$branch_name" | grep -q "$branch_name"; then
          echo "Error: Branch '$branch_name' already exists. Please choose a different branch name."
          exit 1
        fi
        
        echo "Branch name validation passed: $branch_name"

    - name: Create and checkout new branch
      run: |
        branch_name="${{ github.event.inputs.branch_name }}"
        git checkout -b "$branch_name"
        echo "Created and checked out branch: $branch_name"

    - name: Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: '1.7.3'

    - name: Install dependencies
      run: |
        julia --project=. -e 'using Pkg; Pkg.instantiate()'

    - name: Update build_tarballs.jl with new version and commit SHA
      run: |
        branch_name="${{ github.event.inputs.branch_name }}"
        base_version="${{ github.event.inputs.base_version }}"
        new_version="${base_version}-${branch_name}"
        
        # Get the current commit SHA
        commit_sha=$(git rev-parse HEAD)
        echo "Current commit SHA: $commit_sha"
        
        echo "Updating build_tarballs.jl with version: $new_version and commit SHA: $commit_sha"
        
        # Update the version line in build_tarballs.jl
        sed -i "s/version = v\"[^\"]*\"/version = v\"$new_version\"/" build_tarballs.jl
        
        # Update the GitSource commit SHA in build_tarballs.jl
        sed -i "s/GitSource(\"https:\/\/github.com\/RelationalAI\/iceberg_rust_ffi.git\", \"[a-f0-9]*\")/GitSource(\"https:\/\/github.com\/RelationalAI\/iceberg_rust_ffi.git\", \"$commit_sha\")/" build_tarballs.jl
        
        echo "Updated build_tarballs.jl:"
        echo "Version:"
        grep "version = v" build_tarballs.jl
        echo "GitSource:"
        grep "GitSource" build_tarballs.jl

    - name: Build tarballs
      run: |
        echo "Building tarballs with updated version"
        julia --project=. build_tarballs.jl --verbose --deploy-bin="RelationalAI/iceberg_rust_ffi_jll" --targets ${{ github.event.inputs.targets }}
      env:
        BINARYBUILDER_AUTOMATIC_APPLE: true
        BINARYBUILDER_RUNNER: true

    - name: Update Artifacts.toml
      run: |
        julia --project=. -e '
        using Pkg
        Pkg.add("BinaryBuilder")
        using BinaryBuilder
        BinaryBuilder.update_Artifacts_toml("Artifacts.toml")
        '

    - name: Show updated Artifacts.toml
      run: |
        echo "Updated Artifacts.toml contents:"
        cat Artifacts.toml

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Artifacts.toml build_tarballs.jl
        git commit -m "Update build_tarballs.jl version and Artifacts.toml with new tarball URLs"
        git push origin ${{ github.event.inputs.branch_name }} 